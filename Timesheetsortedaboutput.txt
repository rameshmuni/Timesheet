import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class POIforgfgRead {
	
	public static void main(String[] args) throws Exception{
        
        FileInputStream inputFile =new FileInputStream("D:\\MasterSheet.xlsx");
        XSSFWorkbook workbook=new XSSFWorkbook(inputFile);
        XSSFSheet worksheet =workbook.getSheetAt(0);
        
        XSSFWorkbook formatedWorkbook = new XSSFWorkbook(); 
        XSSFSheet formatedWorksheet = formatedWorkbook.createSheet("Employee Data");
        
        int[] columnRange =  findColumnRange(worksheet);
        
        String[] headerArr =  new String[] {"Resource ID","PONumber","Role","Resource Name","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","aa","ab","ac","ad","ae","af"};
        createNewHeaderRow(formatedWorksheet, headerArr);

        int rowNum = 1;
        for(int i=3; i<=worksheet.getLastRowNum(); i++) {
            Row row =  worksheet.getRow(i);
            if (row != null && row.getCell(0) != null && Cell.CELL_TYPE_BLANK != row.getCell(0).getCellType()){
            	Row formatedRow = formatedWorksheet.createRow(rowNum++);
            	
            	int cellnum = 0;
            	for(int j=0; j<=3; j++) {
            		Cell celldata = row.getCell(j);
            		Cell cell = formatedRow.createCell(cellnum++);
            		switch(celldata.getCellType()){
	                   case Cell.CELL_TYPE_STRING: cell.setCellValue(celldata.getStringCellValue());
		                   						   break;
		               case Cell.CELL_TYPE_NUMERIC: cell.setCellValue(celldata.getNumericCellValue());
		               								break;
		               case Cell.CELL_TYPE_BOOLEAN: cell.setCellValue(celldata.getBooleanCellValue());
		                    						 break;
	                }
            	}
            	
            	int cellnumStart = columnRange[0];
            	int cellnumEnd = columnRange[1];
            	for(int j=cellnumStart; j<=cellnumEnd ; j++) {
            		Cell celldata = row.getCell(j);
            		Cell cell = formatedRow.createCell(cellnum++);
            		switch(celldata.getCellType()){
	                   case Cell.CELL_TYPE_STRING: cell.setCellValue(celldata.getStringCellValue());
		                   						   break;
		               case Cell.CELL_TYPE_NUMERIC: cell.setCellValue(celldata.getNumericCellValue());
		               								break;
		               case Cell.CELL_TYPE_BOOLEAN: cell.setCellValue(celldata.getBooleanCellValue());
		                    						 break;
	                }
            	}
            }
        }
        
        inputFile.close();
        
        FileOutputStream outputFile = new FileOutputStream(new File("D:\\update.xlsx"));
        formatedWorkbook.write(outputFile);
        outputFile.close();
    }
	
	private static void createNewHeaderRow(XSSFSheet formatedWorksheet, String[] headerArr) {
	    Row headerRow = formatedWorksheet.createRow(0);
	    int cellnum = 0;
	    for (String str : headerArr) {
	      	Cell cell = headerRow.createCell(cellnum++);
        	cell.setCellValue(str);
        }
	}

	private static int[] findColumnRange(XSSFSheet worksheet) {
		
		List<CellRangeAddress> mergeList = new ArrayList<CellRangeAddress>();
		
        for (int i = 0; i < worksheet.getNumMergedRegions(); i++) {
        	if(worksheet.getMergedRegion(i).getNumberOfCells() >= 28) {
            	mergeList.add(worksheet.getMergedRegion(i));
        	}
        }
        
        for(CellRangeAddress crAddress : mergeList) {
        	int columnIndex = crAddress.getFirstColumn();
        	Row row = worksheet.getRow(crAddress.getFirstRow());
        	if(row != null) {
        		Cell cell =  row.getCell(columnIndex);
        		if(cell != null && (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) && DateUtil.isCellDateFormatted(cell)) {
        			
        			Calendar calendar = Calendar.getInstance();
        			calendar.setTime(cell.getDateCellValue());
        			
        			Calendar current = Calendar.getInstance();
        			current.setTime(new Date());
        	        int month = current.get(Calendar.MONTH) - 1;
        	        int year = current.get(Calendar.YEAR);
        	        if(month == 0) {
        	        	year = year - 1;
        	        	month = 11;
        	        }
        			
        			if(calendar.get(Calendar.YEAR) == year && calendar.get(Calendar.MONTH) == 1) {
        	        	int i = columnIndex; 
        	        	int j = crAddress.getLastColumn();
        	        	return new int[] {i,j};
        			}
        	    }
        	}
        }
		return new int[]{};
	}
	
}
